var canvas = document.querySelector("canvas");
var drawingSurface = canvas.getContext("2d");
var map = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1],
    [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1],
    [1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1],
    [1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
];
var shuffle = function (array) {
    var counter = array.length;
    while (counter > 0) {
        var index = Math.floor(Math.random() * counter);
        counter--;
        var temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
    return array;
};
var gameObjects = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0],
    [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0],
    [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
var EMPTY = 0;
var FLOOR = 1;
var BOX = 2;
var MONSTER = 3;
var PLAYER = 4;
var WALL = 5;
var SIZE = 64;
var player = null;
var ROWS = map.length;
var COLUMNS = map[0].length;
var tilesheetColumns = 3;
var sprites = [];
var monsters = [];
var boxes = [];
var assetsToLoad = [];
var assetsLoaded = 0;
var LOADING = 0;
var BUILD_MAP = 1;
var PLAYING = 2;
var OVER = 3;
var gameState = LOADING;
var UP = 38;
var DOWN = 40;
var RIGHT = 39;
var LEFT = 37;
var moveUp = false;
var moveDown = false;
var moveRight = false;
var moveLeft = false;
var loadHandler = function () {
    assetsLoaded++;
    if (assetsLoaded === assetsToLoad.length) {
        image.removeEventListener("load", loadHandler, false);
        gameState = BUILD_MAP;
    }
};
var image = new Image();
image.addEventListener("load", loadHandler, false);
image.src = "images/tilesheet.png";
assetsToLoad.push(image);
window.addEventListener("keydown", function (event) {
    switch (event.keyCode) {
        case UP:
            moveUp = true;
            break;
        case DOWN:
            moveDown = true;
            break;
        case LEFT:
            moveLeft = true;
            break;
        case RIGHT:
            moveRight = true;
            break;
    }
}, false);
window.addEventListener("keyup", function (event) {
    switch (event.keyCode) {
        case UP:
            moveUp = false;
            break;
        case DOWN:
            moveDown = false;
            break;
        case LEFT:
            moveLeft = false;
            break;
        case RIGHT:
            moveRight = false;
            break;
    }
}, false);
var buildMap = function (levelMap) {
    for (var row = 0; row < ROWS; row++) {
        for (var column = 0; column < COLUMNS; column++) {
            var currentTile = levelMap[row][column];
            if (currentTile !== EMPTY) {
                var tilesheetX = Math.floor((currentTile - 1) % tilesheetColumns) * SIZE;
                var tilesheetY = Math.floor((currentTile - 1) / tilesheetColumns) * SIZE;
                switch (currentTile) {
                    case FLOOR:
                        var floor = new SpriteObject;
                        floor.sourceX = tilesheetX;
                        floor.sourceY = tilesheetY;
                        floor.x = column * SIZE;
                        floor.y = row * SIZE;
                        sprites.push(floor);
                        break;
                    case BOX:
                        var box = new SpriteObject;
                        box.sourceX = tilesheetX;
                        box.sourceY = tilesheetY;
                        box.x = column * SIZE;
                        box.y = row * SIZE;
                        sprites.push(box);
                        boxes.push(box);
                        break;
                    case WALL:
                        var wall = new SpriteObject;
                        wall.sourceX = tilesheetX;
                        wall.sourceY = tilesheetY;
                        wall.x = column * SIZE;
                        wall.y = row * SIZE;
                        sprites.push(wall);
                        break;
                    case PLAYER:
                        player = new SpriteObject;
                        player.sourceX = tilesheetX;
                        player.sourceY = tilesheetY;
                        player.x = column * SIZE;
                        player.y = row * SIZE;
                        sprites.push(player);
                        break;
                    case MONSTER:
                        var monster = new Enemy();
                        monster.sourceX = tilesheetX;
                        monster.sourceY = tilesheetY;
                        monster.x = column * SIZE;
                        monster.y = row * SIZE;
                        changeDirection(monster);
                        monsters.push(monster);
                        sprites.push(monster);
                        break;
                }
            }
        }
    }
};
var changeDirection = function (monster) {
    monster.validDirections = [];
    monster.direction = monster.NONE;
    var monsterColumn = Math.floor(monster.x / SIZE);
    var monsterRow = Math.floor(monster.y / SIZE);
    if (monsterRow > 0) {
        var thingAbove = map[monsterRow - 1][monsterColumn];
        if (thingAbove === FLOOR) {
            monster.validDirections.push(monster.UP);
        }
    }
    if (monsterRow < ROWS - 1) {
        var thingBelow = map[monsterRow + 1][monsterColumn];
        if (thingBelow === FLOOR) {
            monster.validDirections.push(monster.DOWN);
        }
    }
    if (monsterColumn > 0) {
        var thingToTheLeft = map[monsterRow][monsterColumn - 1];
        if (thingToTheLeft === FLOOR) {
            monster.validDirections.push(monster.LEFT);
        }
    }
    if (monsterColumn < COLUMNS - 1) {
        var thingToTheRight = map[monsterRow][monsterColumn + 1];
        if (thingToTheRight === FLOOR) {
            monster.validDirections.push(monster.RIGHT);
        }
    }
    if (monster.validDirections.length !== 0) {
        var upOrDownPassage = (monster.validDirections.indexOf(monster.UP) !== -1
            || monster.validDirections.indexOf(monster.DOWN) !== -1);
        var leftOrRightPassage = (monster.validDirections.indexOf(monster.LEFT) !== -1
            || monster.validDirections.indexOf(monster.RIGHT) !== -1);
        if (upOrDownPassage && leftOrRightPassage
            || monster.validDirections.length === 1) {
            if (player !== null && monster.hunt === true) {
                findClosestDirection(monster);
            }
            if (monster.direction === monster.NONE) {
                var randomNumber = Math.floor(Math.random() * monster.validDirections.length);
                monster.direction = monster.validDirections[randomNumber];
            }
            switch (monster.direction) {
                case monster.RIGHT:
                    monster.vx = monster.speed;
                    monster.vy = 0;
                    break;
                case monster.LEFT:
                    monster.vx = -monster.speed;
                    monster.vy = 0;
                    break;
                case monster.UP:
                    monster.vx = 0;
                    monster.vy = -monster.speed;
                    break;
                case monster.DOWN:
                    monster.vx = 0;
                    monster.vy = monster.speed;
            }
        }
    }
};
var findClosestDirection = function (monster) {
    var closestDirection = undefined;
    var vx = player.centerX() - monster.centerX();
    var vy = player.centerY() - monster.centerY();
    if (Math.abs(vx) >= Math.abs(vy)) {
        if (vx <= 0) {
            closestDirection = monsterObject.LEFT;
        }
        else {
            closestDirection = monsterObject.RIGHT;
        }
    }
    else {
        if (vy <= 0) {
            closestDirection = monsterObject.UP;
        }
        else {
            closestDirection = monsterObject.DOWN;
        }
    }
    for (var i = 0; i < monster.validDirections.length; i++) {
        if (closestDirection === monster.validDirections[i]) {
            monster.direction = closestDirection;
        }
    }
};
var playGame = function () {
    if (moveUp && !moveDown) {
        player.vy = -4;
    }
    if (moveDown && !moveUp) {
        player.vy = 4;
    }
    if (moveLeft && !moveRight) {
        player.vx = -4;
    }
    if (moveRight && !moveLeft) {
        player.vx = 4;
    }
    if (!moveUp && !moveDown) {
        player.vy = 0;
    }
    if (!moveLeft && !moveRight) {
        player.vx = 0;
    }
    player.x = Math.max(0, Math.min(player.x + player.vx, canvas.width - player.width));
    player.y = Math.max(0, Math.min(player.y + player.vy, canvas.height - player.height));
    for (var i = 0; i < boxes.length; i++) {
        blockRectangle(player, boxes[i]);
    }
    for (var i = 0; i < monsters.length; i++) {
        var monster = monsters[i];
        if (hitTestRectangle(player, monster)) {
            gameState = OVER;
        }
    }
    for (var i = 0; i < monsters.length; i++) {
        var monster = monsters[i];
        monster.x += monster.vx;
        monster.y += monster.vy;
        if (Math.floor(monster.x) % SIZE === 0
            && Math.floor(monster.y) % SIZE === 0) {
            changeDirection(monster);
        }
    }
};
var endGame = function () {
    alert("You have died a horrible death!");
    window.location.reload(true);
};
var render = function () {
    drawingSurface.clearRect(0, 0, canvas.width, canvas.height);
    if (sprites.length !== 0) {
        for (var i = 0; i < sprites.length; i++) {
            var sprite = sprites[i];
            if (sprite.visible) {
                drawingSurface.drawImage(image, sprite.sourceX, sprite.sourceY, sprite.sourceWidth, sprite.sourceHeight, Math.floor(sprite.x), Math.floor(sprite.y), sprite.width, sprite.height);
            }
        }
    }
};
var update = function () {
    requestAnimationFrame(update, canvas);
    switch (gameState) {
        case LOADING:
            console.log("loading...");
            break;
        case BUILD_MAP:
            shuffle(map);
            buildMap(map);
            buildMap(gameObjects);
            gameState = PLAYING;
            break;
        case PLAYING:
            playGame();
            break;
        case OVER:
            endGame();
            break;
    }
    render();
};
update();
//# sourceMappingURL=data:application/json;base64,