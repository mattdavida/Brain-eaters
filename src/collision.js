var hitTestPoint = function (pointX, pointY, sprite) {
    var hit = pointX > sprite.left() && pointX < sprite.right()
        && pointY > sprite.top() && pointY < sprite.bottom();
    return hit;
};
var hitTestRectangle = function (r1, r2) {
    var hit = false;
    var vx = r1.centerX() - r2.centerX();
    var vy = r1.centerY() - r2.centerY();
    var combinedHalfWidths = r1.halfWidth() + r2.halfWidth();
    var combinedHalfHeights = r1.halfHeight() + r2.halfHeight();
    if (Math.abs(vx) < combinedHalfWidths) {
        if (Math.abs(vy) < combinedHalfHeights) {
            hit = true;
        }
        else {
            hit = false;
        }
    }
    else {
        hit = false;
    }
    return hit;
};
var blockRectangle = function (r1, r2) {
    var collisionSide = "";
    var vx = r1.centerX() - r2.centerX();
    var vy = r1.centerY() - r2.centerY();
    var combinedHalfWidths = r1.halfWidth() + r2.halfWidth();
    var combinedHalfHeights = r1.halfHeight() + r2.halfHeight();
    if (Math.abs(vx) < combinedHalfWidths) {
        if (Math.abs(vy) < combinedHalfHeights) {
            var overlapX = combinedHalfWidths - Math.abs(vx);
            var overlapY = combinedHalfHeights - Math.abs(vy);
            if (overlapX >= overlapY) {
                if (vy > 0) {
                    collisionSide = "top";
                    r1.y = r1.y + overlapY;
                }
                else {
                    collisionSide = "bottom";
                    r1.y = r1.y - overlapY;
                }
            }
            else {
                if (vx > 0) {
                    collisionSide = "left";
                    r1.x = r1.x + overlapX;
                }
                else {
                    collisionSide = "right";
                    r1.x = r1.x - overlapX;
                }
            }
        }
        else {
            collisionSide = "none";
        }
    }
    else {
        collisionSide = "none";
    }
    return collisionSide;
};
//# sourceMappingURL=data:application/json;base64,